name: Build-Kernel-6.1-LTS
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      make_release:
        required: true
        type: boolean
        default: true
      revision:
        required: false
        type: string
      version:
        required: false
        type: string

jobs:
  build-kernel-sukisu-susfs:
    runs-on: ubuntu-latest
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      KBUILD_BUILD_USER: "DawnFz"
      KBUILD_BUILD_HOST: "Github"

    steps:
      - name: 初始化构建空间
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-large-packages: 'true'
          remove-swapfile: 'true'
          remove-cached-tools: 'false'
          verbose: 'false'

      - name: 安装并配置 ccache
        run: |
          sudo apt update && sudo apt upgrade -y && sudo apt install -y ccache python3 git curl
          mkdir -p ~/.cache/bazel
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
      
      - name: 从缓存中还原 ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: android14-6.1-LTS-ccache-${{ github.sha }}
          restore-keys: |
            android14-6.1-LTS-ccache-
      
      - name: 同步仓库资源
        uses: actions/checkout@v4

      - name: 配置工作环境
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          echo "下载工具链..."
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg

          echo "配置环境变量..."
          CONFIG="android14-6.1-LTS"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"
          echo "TIMESTAMP=$(date -u '+%a %b %e %T %Z %Y')" >> $GITHUB_ENV
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "BOOTHASH=$(date +%s%N | sha1sum | cut -c1-12)" >> $GITHUB_ENV
          openssl genpkey -algorithm RSA -pkeyopt rsa_keygen_bits:2048 > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV

          echo "克隆外部依赖..."
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV
          SUSFS_BRANCH="gki-android14-6.1"
          # Debug print the branches
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          # Clone repositories using the branch names
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd SukiSU_patch
          cp -r AnyKernel3 ../

          echo "初始化和同步内核源码中..."
          cd -
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          FORMATTED_BRANCH="android14-6.1-lts"
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16

          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml

          # Check if branch is deprecated
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            echo "Found deprecated branch: $FORMATTED_BRANCH"
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi

          # Sync repo and apply patches
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: 配置 Clang 21
        run: |
          curl -o clang-r563880.tar.gz https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main-kernel/clang-r563880.tar.gz
          echo "Unzip clang-r563880.tar.gz..."
          sudo mkdir -p $GITHUB_WORKSPACE/clang-r563880
          sudo tar -xzf clang-r563880.tar.gz -C $GITHUB_WORKSPACE/clang-r563880
          echo "Extract clang-r563880.tar.gz  completed..."
          sudo rm -rf ./clang-r563880.tar.gz

          cd "$CONFIG"
          echo "删除内核源码中默认配置的 clang 并替换为 clang21 ..."
          sudo rm -rf ./prebuilts/clang/host/linux-x86/clang-r487747c
          sudo mv -f $GITHUB_WORKSPACE/clang-r563880 ./prebuilts/clang/host/linux-x86/

          sudo mkdir -p ./prebuilts/clang/host/linux-x86/clang-r487747c
          sudo cp -rf ./prebuilts/clang/host/linux-x86/clang-r563880/* ./prebuilts/clang/host/linux-x86/clang-r487747c
          echo "Clang 21 替换完成 ..."

          # 修改编译工具链中的 kleaf 配置
          sudo cp -rf $GITHUB_WORKSPACE/kernel-patch/build-tools-config/* ./prebuilts/clang/host/linux-x86/kleaf
          echo "编译工具链配置文件修改完成..."
      
      - name: 添加 SukiSU & 应用补丁
        run: |
          echo "开始安装 SukiSU Ultra..."
          cd "$CONFIG"
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-1.5.8
          
          echo "Applying SUSFS patches..."
          # Copy SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          # Change to common directory and apply common SUSFS patch
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch || true
          echo "SukiSU Ultra 及 SUSFS 安装完成..."

          # 应用 LTS 分支补丁
          sudo cp -rf $GITHUB_WORKSPACE/kernel-patch/kernel-common/* ./
          echo "lts patches complete..."

          echo "Applying hooks for SukiSU..."
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          echo "syscall_hooks patches complete..."

          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          echo "69_hide_stuff patches complete..."

          cp -r ../../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../../SukiSU_patch/other/zram/lz4k/lib/* ./lib/
          cp -r ../../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto/
          
          cp ../../SukiSU_patch/other/zram/zram_patch/6.1/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true
          echo "lz4kd patches complete..."
          echo '已完成全部内核补丁...'

      - name: 设置内核配置信息
        run: |
          # 写入 ZRAM 配置
          echo "Add zram configuration settings..."
          CONFIG_FILE="$CONFIG/common/arch/arm64/configs/gki_defconfig"

          if grep -q "CONFIG_ZSMALLOC" -- "$CONFIG_FILE"; then
              sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' "$CONFIG_FILE"
          else
              echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
          fi

          sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' "$CONFIG_FILE"
          sed -i 's/"drivers\/block\/zram\/zram\.ko",//g; s/"mm\/zsmalloc\.ko",//g' "$CONFIG/common/modules.bzl"
          echo "CONFIG_MODULE_SIG_FORCE=n" >> "$CONFIG_FILE"

          if grep -q "CONFIG_ZSMALLOC=y" "$CONFIG_FILE" && grep -q "CONFIG_ZRAM=y" "$CONFIG_FILE"; then
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_ZRAM_WRITEBACK=y" >> "$CONFIG_FILE"
          fi

          cd "$CONFIG"
          echo "Add KSU configuration settings..."
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> ./common/arch/arm64/configs/gki_defconfig

          echo "Add additional tmpfs config settings..."
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig

          echo "Add additional config settings..."
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig

          echo "Add BBR config settings..."
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig 
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig

          echo "Add SUSFS configuration settings..."
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
      
          echo "Remove check_defconfig..."
          sed -i 's/check_defconfig//' ./common/build.config.gki

          echo "设置内核构建信息..."
          SUBLEVEL=$(awk -F' = ' '/^SUBLEVEL / {print $2}' ./common/Makefile)
          if [ ! -z ${{ inputs.version }} ]; then
            echo "目标内核版本号:6.1.$SUBLEVEL-android14-11-g$BOOTHASH-${{ inputs.version }}"
            echo "BOOTNAME=6.1.$SUBLEVEL-android14-11-g$BOOTHASH-${{ inputs.version }}" >> $GITHUB_ENV
            sed -i '$s|echo "\$res"|echo "-android14-11-g'"${BOOTHASH}"'-'"${{ inputs.version }}"'"|' ./common/scripts/setlocalversion
          else
            echo "未配置内核版本号,将使用默认版本号:6.1.$SUBLEVEL-android14-11-g$BOOTHASH"
            echo "BOOTNAME=6.1.$SUBLEVEL-android14-11-g$BOOTHASH" >> $GITHUB_ENV
            sed -i '$s|echo "\$res"|echo "-android14-11-g'"${BOOTHASH}"'"|' ./common/scripts/setlocalversion
          fi
          
          perl -pi -e 's/"\$\{LINUX_COMPILE_BY\}"/"\Q$ENV{KBUILD_BUILD_USER}\E"/g' ./common/scripts/mkcompile_h
          perl -pi -e 's/"\$\{LINUX_COMPILE_HOST\}"/"\Q$ENV{KBUILD_BUILD_HOST}\E"/g' ./common/scripts/mkcompile_h
          echo "设置内核构建用户及主机:$KBUILD_BUILD_USER@$KBUILD_BUILD_HOST"

          TIMESTAMP_ESCAPED=$(echo "$TIMESTAMP" | sed 's|/|\\/|g; s| |\\ |g')
          sed -i "s|\$(build-timestamp)|${TIMESTAMP_ESCAPED}|g" ./common/init/Makefile
          echo "设置内核构建时间:$TIMESTAMP"

          sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./common/BUILD.bazel
          rm -rf ./common/android/abi_gki_protected_exports_*
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          sed -E -i '/^CONFIG_LOCALVERSION=/ s/(.*)"$/\1"/' ./common/arch/arm64/configs/gki_defconfig
          echo "配置内核信息完成..."

      - name: 编译内核
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 30
          max_attempts: 3
          retry_on: timeout
          command: |
            set -e
            set -x
            cd "$CONFIG"
            sed -i 's/BUILD_SYSTEM_DLKM=1/BUILD_SYSTEM_DLKM=0/' common/build.config.gki.aarch64
            sed -i '/MODULES_ORDER=android\/gki_aarch64_modules/d' common/build.config.gki.aarch64
            sed -i '/KMI_SYMBOL_LIST_STRICT_MODE/d' common/build.config.gki.aarch64
            echo "开始构建内核..."
            tools/bazel build --disk_cache=/home/runner/.cache/bazel --config=fast --lto=thin //common:kernel_aarch64_dist || exit 1
            ccache --show-stats
          
      - name: 打包编译产物
        run: |
          echo "正在打包编译产物..."
          cp ./$CONFIG/bazel-bin/common/kernel_aarch64/Image ./
          cd ./AnyKernel3
          ZIP_NAME="$BOOTNAME-Ak3.zip"
          echo "Creating zip file: $ZIP_NAME..."
          mv ../Image ./Image
          zip -r "../$ZIP_NAME" ./*
          rm ./Image
          echo "Image打包完成..."

      - name: 上传产出文件
        uses: actions/upload-artifact@v4
        with:
          name: SukiSU-kernel-${{ env.CONFIG }}
          path: |
            *.zip
